#!/usr/bin/env python3
import sys
import os
import math

def print_usage(program: str):
    print(f"Usage: {program} filename [flags]")
    print(f"Available flags:")
    print(f"    --debug     Use debug FACT")
    print(f"    --no-quick  Don't do a quick format, set all bytes to zero")

def main(argv) -> int:
    program: str = argv.pop(0)
    if len(argv) < 1:
        print_usage(program)
        print("ERROR: No file specified")
        return 1
    
    filename = argv.pop(0)
    if not os.path.exists(filename):
        print_usage(program)
        print(f"ERROR: File {filename} doesn't exist")
        return -1
    
    fd = os.open(filename, os.O_RDONLY)
    try:
        file_size = os.lseek(fd, 0, os.SEEK_END)
    finally:
        os.close(fd)

    fs_size_blocks = math.floor(file_size / 4096)
    fs_size = fs_size_blocks * 4096 + 8
    if fs_size > file_size:
        fs_size_blocks -= 1
        fs_size = fs_size_blocks * 4096 + 8
    if fs_size_blocks < 2:
        print(f"ERROR: Size of {filename} needs to be at least {2 * 4096 + 8} bytes; it is {file_size} bytes")
        return 2
    
    add_debug_tree = False
    quick_format = True
    while len(argv) > 0:
        flag = argv.pop(0)
        if flag == "--debug":
            add_debug_tree = True
        elif flag == "--no-quick":
            quick_format = False
        else:
            print_usage(program)
            print(f"ERROR: Unknown flag {flag}.")
            return 3
    
    with open(filename, "rb+") as f:
        # Write the block size at the very beginning (64-bit)
        f.write(b"\x00\x00\x00\x00\x00\x00\x10\x00")
        f.write(b'{"filesystem_info":{"size":'+str(fs_size).encode()+b'},"contents":[')
        if (add_debug_tree):
            f.write(b'{"name": "dir","is_dir": true,"contents": [{"name": "file.txt","is_dir": false,"file_size": 0,"attributes": {"date_created": 1719480000,"date_modified": 1719480000,"date_accessed": 1719480000, "permissions": "644"},"allocation": []}]}')
        f.write(b']}')
        f.write(bytes((4096 + 8) - f.tell()))
        if not quick_format:
            for _ in range(1, fs_size_blocks):
                f.write(bytes(4096))

    return 0


if __name__ == "__main__":
    exit(main(sys.argv))